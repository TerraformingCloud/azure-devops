# Terraform pipeline

name: 0.1.$(Rev:r)

# Pipeline CI Trigger 

#  trigger:
#    batch: true
#    branches:
#      include:
#      - master
#    paths:
#      exclude:
#        - /*.md


# A pipeline with no CI trigger

trigger: none

variables:
  tf_version: '0.12.24'
  tf_in_automation: true
  tf_dir: '$(System.DefaultWorkingDirectory)/'
  backend_rg: 'Jenkins'
  backend_sa_name: 'tfbackend2020'
  backend_sc_name: 'tfremote'
  backend_key: 'adoterraform.tfstate'



stages:
- stage: Terraform_Plan
  jobs:
    - deployment: Terraform_Plan
      displayName: Terraform_Plan
      pool:
       vmImage: 'vs2017-win2016'
      environment: Terraform_Plan
      strategy:
        runOnce:
          deploy:   
            steps:
              - checkout: self

              - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
                displayName: 'Install Terraform'
                inputs:
                  terraformVersion: $(tf_version)

              - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                displayName: 'Terraform Init'
                inputs:
                  command: init
                  workingDirectory: $(tf_dir)
                  backendType: azurerm
                  backendServiceArm: 'Terraform SPN'
                  backendAzureRmResourceGroupName: $(backend_rg)
                  backendAzureRmStorageAccountName: $(backend_sa_name)
                  backendAzureRmContainerName: $(backend_sc_name)
                  backendAzureRmKey: $(backend_key)

              - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                displayName: 'Terraform Validate'
                inputs:
                  workingDirectory: $(tf_dir)

              - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                displayName: 'Terraform Plan'
                inputs:
                  command: plan
                  workingDirectory: $(tf_dir)
                  environmentServiceName: 'Terraform SPN'


- stage: Terraform_Apply
  jobs:
    - deployment: Terraform_Apply
      displayName: Terraform_Apply
      pool:
       vmImage: 'vs2017-win2016'
      environment: Terraform_Apply
      strategy:
        runOnce:
          deploy:   
            steps:
              - checkout: self

              - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
                displayName: 'Install Terraform'
                inputs:
                  terraformVersion: $(tf_version)

              - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                displayName: 'Terraform Init'
                inputs:
                  command: init
                  workingDirectory: $(tf_dir)
                  backendType: azurerm
                  backendAzureRmResourceGroupName: $(backend_rg)
                  backendAzureRmStorageAccountName: $(backend_sa_name)
                  backendAzureRmContainerName: $(backend_sc_name)
                  backendAzureRmKey: $(backend_key)


              - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
                displayName: 'Terraform Apply'
                inputs:
                  command: apply
                  workingDirectory: $(tf_dir)
                  environmentServiceName: 'Terraform SPN'
